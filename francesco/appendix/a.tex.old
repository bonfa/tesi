\appendix
\chapter{Appendix A}\label{appA}
	
	\section{Actual implementation of the software}
	As in chapter \ref{chDesign}, in this section class diagrams are used in order to clarify the description. Again, such description follows a top-down approach: section \ref{impl_arch} gives an overview of the architecture and for this reason the diagram in figure \ref{fig:implementation_names} contains only the names of the classes. The following sections study in deep specific aspects of the software and, consequently, contain more detailed diagrams.


		\subsection{Overview}\label{impl_arch}
		Figure \ref{fig:implementation_names} shows the class diagram of the whole software. 
		According to the design specifications defined in chapter \ref{chDesign}, the software is organized in four main parts, each of which has its own role.

		\begin{figure}[h]
		  \begin{center} 
		    \fbox{	
		       \includegraphics[width=\textwidth*\real{0.9}]{images/ch_06/implementazione_solo_nomi.jpg}
		    }
		  \end{center} 
		  \caption{\textit{Class diagram which illustrates the whole architecture of the software}}  
		  \label{fig:implementation_names}
	 	\end{figure}
 
		Classes \emph{Server} and \emph{Session} manage the communication with \mbox{ACT-R}, implemented by a client server approach.
		Classes \emph{Proxy}, \emph{FeatureGetter}, \emph{Input}, \emph{FeatureExtractor}, \emph{MarkerDetector} and \emph{QRScanner} have the role of extracting features from the input data and preparing the messages to be sent to the cognitive architecture.
		\emph{Object}, \emph{BoundingBox}, \emph{Blob}, \emph{QR}, \emph{Circle}, \emph{Triangle}, \emph{Quadrilateral}, \emph{Marker} and \emph{Button} form the object hierarchy.
		\emph{InputException}, \emph{NotOverlappedSegmentException}, \emph{ParallelLinesException}, \emph{VerticalLineException}, \emph{CoincidentLinesException}, \emph{FourPointsSorter}, \emph{StraightLine}, \emph{Segment} and \emph{Point} represent the utility classes.
	
		Comparing the classes shown in figure \ref{fig:implementation_names} with the design choices defined in chapter \ref{chDesign}, the reader can notice two facts: both the feature extractor and the class hierarchy parts strictly adhere to the project and, accordingly to the design choices, the classes containing the utility functions and the features for the communication with \mbox{ACT-R} have been properly developed.
		%The following sections presents the implementation of the whole classes, focusing mainly on these two latter parts of the software. 

	
		

		The part responsible for the communication with the cognitive architecture is composed by the classes \emph{Server} and \emph{Session}. 

		\begin{figure}[h]
		  \begin{center} 
		    \fbox{	
		       \includegraphics[width=\textwidth*\real{0.9}]{images/ch_06/communication.jpg}
		    }
		  \end{center} 
		  \caption{\textit{Class diagram describing the implementation part of the software dedicated to the communication}}  
		  \label{fig:impl_feat_extraction}
	 	\end{figure}	


\newpage
		\subsection{Feature Extraction}
		Image \ref{fig:impl_feat_extraction} shows a class diagram of the implementation of the feature extractor part of the software. 
		Analyzing it, the reader can notice that the implementation adheres very good to the design specifications, described at page \pageref{featExtraction}. 
		The classes, in fact, are the same but with more attributes and methods. 
		Such additions have been introduced at development time, as the requirements became clearer.
		Notice that some methods, like for example \emph{setCroppedImage} in FeatureExtractor class, are used to obtain goals different from the one described in this work, but make sense in the general context of the team work. This topic is better explained in the introductory part of chapter \ref{chDesign}. 

		\begin{figure}[h]
		  \begin{center} 
		    \fbox{	
		       \includegraphics[width=\textwidth*\real{0.9}]{images/ch_06/fe.jpg}
		    }
		  \end{center} 
		  \caption{\textit{Class diagram describing the implementation of the feature extraction part of the software}}  
		  \label{fig:impl_feat_extraction}
	 	\end{figure}	


		\subsection{Object Hierarchy}
		As it can be noticed comparing the diagram in figure \ref{fig:impl_hierarchy} with the diagram of the design at page \pageref{fig:HierarchyDesign}, the differences between the implementation and the project are minimal. 
		In fact, further classes have not been introduced; rather, the existing ones have been provided with additional parameters and methods, as, for example, the attributes \emph{color} and \emph{center}.
		According to the iterative development process, different parameters have been added at different moments of the development.
		\begin{figure}[h]
		  \begin{center} 
		    \fbox{	
		       \includegraphics[width=\textwidth*\real{0.9}]{images/ch_06/hierarchy.jpg}
		    }
		  \end{center} 
		  \caption{\textit{Class diagram that shows the implementation of the object hierarchy}}  
		  \label{fig:impl_hierarchy}
	 	\end{figure}

	

		\subsection{Utility Part}
		The classes which form the utility parts of the software are divided in two categories: the exception classes and the ones representing all the other utilities. 
		To these, two modules containing functions are added. 
		Figure \ref{fig:impl_utility} shows a class diagram containing all the classes that constitute this part of the software. 
		The modules, as not classes, can not be shown in the diagram.

		\begin{figure}[h]
		  \begin{center} 
		    \fbox{	
		       \includegraphics[width=\textwidth*\real{0.9}]{images/ch_06/utility.jpg}
		    }
		  \end{center} 
		  \caption{\textit{Class diagram showing the utility part of the software}}  
		  \label{fig:impl_utility}
	 	\end{figure}

		Classes \emph{InputException}, \emph{NotOverlappedSegmentException}, \emph{ParallelLinesException}, \emph{VerticalLineException} and \emph{CoincidentLinesException} are the exceptions classes. 
		As such, they are used to handle all the anomalous or exceptional events occurring at run-time.	
	
		\emph{StraightLine}, \emph{Segment} and \emph{Point} represent geometrical entities. These elements serve as basic structures for creating the objects in the hierarchy and making evaluations between couples of objects.
		Such evaluations can be both qualitative and quantitative, as, for example, the distances between the centers of two objects or the relative positions of one object in respect with another.
		
		\emph{FourPointsSorter} and the function modules contain the basic methods which are fundamental for all the operations executed by all the other classes of the software.
		For reasons of completeness the prototypes of the functions are listed in appendix \ref{appA}.



	\section{Prototypes of the utility functions}
	This section contains the prototypes of the functions that are not contained in classes and thus are not inserted in chapter \ref{impl_test}
	
	\subsection*{Functions prototypes in extractorUtils.h}
	\todo{formattare decentemente sta roba}
	\lstset{caption="", label=lst:prototypesA}
	\begin{lstlisting}
	double angle( cv::Point pt1, cv::Point pt2, cv::Point pt0 );
	double getDistance(cv::Point a, cv::Point b);
	bool similar(cv::vector<cv::Point> a, cv::vector<cv::Point> b);
	bool tooClose(cv::Point a, cv::Point b);
	bool isFalse(cv::vector<cv::Point> square);
	bool isTriangle(cv::vector<cv::Point> terna);
	cv::vector<cv::vector<cv::Point> > deleteOverlapped(cv::vector<cv::vector<cv::Point> > oldList);
	cv::vector<cv::vector<cv::Point> > squaresSort(cv::vector<cv::vector<cv::Point> > squareList);
	cv::vector<cv::vector<cv::Point> > deleteFalseSquares(cv::vector<cv::vector<cv::Point> > oldList);
	cv::vector<cv::Point> sort4PointsClockwise(cv::vector<cv::Point> points);
	cv::vector<cv::vector<cv::Point> > deleteFalseTriangles(cv::vector<cv::vector<cv::Point> > oldList);
	\end{lstlisting}

	\subsection*{Functions prototypes in utils.h}
	\lstset{caption="", label=lst:prototypesB}
	\begin{lstlisting}
	int getMinMax(const std::vector<Point>& coords, int type);
	std::vector<Point> sort4PointsClockwise(std::vector<Point> points);
	double erone(Point a, Point b, Point c);
	bool inLinePoints(int ax, int ay, int bx, int by, int cx, int cy );
	double getDistance(Point a, Point b);
	bool areSame(double a, double b);
	double getMin(const std::vector<double>& values);
	bool fileExists(char * path);
	string intToString(int a);
	\end{lstlisting}


	
